{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Development setup","text":"<p>This documentation describes how I installed Belenios on a Fedora linux workstation on Arm64 and deployed it to an AWS EC2 instance running Amazon Linux 2023 also on Arm64. </p>"},{"location":"#my-setup","title":"My setup","text":"<p>I have a Macbook Pro M1 (Arm64) running a Fedora Cosmic Atomic desktop in a virtual machine (VMWare Fusion). </p> <p>Fedora atomic desktops run an immutable file system based on ostree. (Only the /etc and /var directories are writable. The home directories are under /var/home.) Podman is preferred over Docker for containerisation.</p> <p>For development work I have created a 'toolbx' container (as recommended by Fedora for atomic desktops). I have installed VSCode, OCaml and the Linux packages recommended by Belenios in the toolbx container. In the toolbx container I use VSCode to make any modifications to Belenios.</p> <p>Any work involving containers I do from the Fedora OS host to avoid issues (if any exist) of running containers within containers. </p> <p>I have created a fork of Belenios, with my modifications under contrib/fedora.</p>"},{"location":"#assumptions","title":"Assumptions","text":"<ul> <li>Operating system is Fedora Linux</li> <li>OCaml is installed </li> <li>The modifications in my fork are used to produce the squashfs image</li> <li>Deployment is to an AWS EC2 instance which has command line access using <code>ssh</code> (for logging in) and <code>rsync</code> (for uploading files).</li> </ul>"},{"location":"aws/deploy/","title":"Deploy to AWS","text":"<p>Assumptions:</p> <ul> <li>EC2 operating system is Amazon Linux 2023</li> <li>nginx is installed</li> <li>a subdomain for Belenios has been set up</li> <li>systemd-nspawn is installed<ul> <li>if not, install the systemd-container package: <code>sudo dnf install systemd-container</code></li> </ul> </li> <li>a belenios squashfs image has been generated as set out in prepare an image</li> </ul>"},{"location":"aws/deploy/#upload-files-to-ec2","title":"Upload files to EC2","text":"<pre><code>cd &lt;belenios root&gt;\nrsync -av -e \"ssh -i &lt;path&gt;MyEC2KeyPair.pem\" contrib/fedora/belenios-nspawn ec2-user@&lt;ip address&gt;:/home/ec2-user\nrsync -av -e \"ssh -i &lt;path&gt;MyEC2KeyPair.pem\" contrib/fedora/belenios-container@.service ec2-user@&lt;ip address&gt;:/home/ec2-user\nrsync -av -e \"ssh -i &lt;path&gt;MyEC2KeyPair.pem\" _docker/build/belenios_3.1-4-g1b81705_arm64.squashfs  ec2-user@&lt;ip address&gt;:/home/ec2-user\nrsync -av -e \"ssh -i &lt;path&gt;MyEC2KeyPair.pem\" demo/ocsigenserver.conf.in   ec2-user@&lt;ip address&gt;:/home/ec2-user\n</code></pre>"},{"location":"aws/deploy/#log-in-to-aws-and-setup-belenios-server-as-a-service","title":"Log in to AWS and setup belenios server as a service","text":"<pre><code># Log in\nssh -i &lt;path&gt;MyEC2KeyPair.pem ec2-user@&lt;EC2 ip address&gt;\n\n# Copy belenios files to /srv \nsudo mkdir /srv/belenios-containers\nsudo cp belenios-nspawn /srv/belenios-containers/\nsudo mkdir /srv/belenios-containers/main\nsudo cp belenios_3.1-4-g1b81705_arm64.squashfs /srv/belenios-containers/main\nsudo ln -s /srv/belenios-containers/main/belenios_3.1-4-g1b81705_arm64.squashfs /srv/belenios-containers/main/rootfs.squashfs\nsudo mkdir /srv/belenios-containers/main/belenios\nsudo chown 1000:1000 /srv/belenios-containers/main/belenios\nmkdir /srv/belenios-containers/main/belenios/etc\nmkdir /srv/belenios-containers/main/belenios/var\ncp ocsigenserver.conf.in /srv/belenios-containers/main/belenios/etc/\n\n# Copy service spec to systemd configuration\nsudo cp belenios-container@.service /etc/systemd/system\n\n# Setup nginx (see below for configuration)\nsudo nano /etc/nginx/sites-available/belenios\ncd /etc/nginx/sites-enabled/\nln -s ../sites-available/belenios\n\n# Run certbot to provide https for nginx - not covered here\n\n# Adapt ocsigenserver.conf.in - see below for configuration\nnano /srv/belenios-containers/main/belenios/etc/ocsigenserver.conf.in\n\n# Make systemd aware of changes and start the Belenios service\nsudo systemctl daemon-reload\nsudo systemctl start belenios-container@main.service\n</code></pre>"},{"location":"aws/deploy/#configuration-files","title":"Configuration files","text":"<p>How my configuration files ended up.</p>"},{"location":"aws/deploy/#etcnginxsites-availablebelenios","title":"/etc/nginx/sites-available/belenios","text":"<pre><code>server {\n   root                      /var/www/html;\n   server_name               belenios.wrmack.com;\n\n   location / {\n        proxy_pass http://127.0.0.1:8001;\n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-For $remote_addr;\n    }\n\n    listen [::]:443 ssl; # managed by Certbot\n    listen 443 ssl; # managed by Certbot\n    ssl_certificate /etc/letsencrypt/live/belenios.wrmack.com/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/belenios.wrmack.com/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n}\nserver {\n    if ($host = belenios.wrmack.com) {\n        return 301 https://$host$request_uri;\n    } # managed by Certbot\n\n\n   listen                    80;\n   listen                    [::]:80;\n   server_name               belenios.wrmack.com;\n    return 404; # managed by Certbot\n}\n</code></pre>"},{"location":"aws/deploy/#srvbelenios-containersmainbeleniosetcocsigenserverconfin","title":"/srv/belenios-containers/main/belenios/etc/ocsigenserver.conf.in","text":"<pre><code>&lt;!-- -*- Mode: Xml -*- --&gt;\n&lt;ocsigen&gt;\n\n  &lt;server&gt;\n\n    &lt;port&gt;127.0.0.1:8001&lt;/port&gt;\n\n    &lt;mimefile&gt;_SHAREDIR_/mime.types&lt;/mimefile&gt;\n\n    &lt;logdir&gt;_VARDIR_/log&lt;/logdir&gt;\n    &lt;datadir&gt;_VARDIR_/lib&lt;/datadir&gt;\n\n    &lt;uploaddir&gt;_VARDIR_/upload&lt;/uploaddir&gt;\n\n    &lt;!--\n      The following limits are there to avoid flooding the server.\n      &lt;maxuploadfilesize&gt; might need to be increased for handling large\n      elections.\n      &lt;maxconnected&gt; is related to the number of simultaneous voters\n      visiting the server.\n    --&gt;\n    &lt;maxuploadfilesize&gt;5120kB&lt;/maxuploadfilesize&gt;\n    &lt;maxconnected&gt;500&lt;/maxconnected&gt;\n\n    &lt;commandpipe&gt;_RUNDIR_/ocsigenserver_command&lt;/commandpipe&gt;\n\n    &lt;charset&gt;utf-8&lt;/charset&gt;\n\n    &lt;extension name=\"staticmod\"/&gt;\n    &lt;extension name=\"redirectmod\"/&gt;\n\n    &lt;extension name=\"ocsipersist\"&gt;\n      &lt;database file=\"_VARDIR_/lib/ocsidb\"/&gt;\n    &lt;/extension&gt;\n\n    &lt;extension name=\"eliom\"/&gt;\n\n    &lt;host charset=\"utf-8\" hostfilter=\"*\" defaulthostname=\"belenios.wrmack.com\"&gt;\n      &lt;!-- &lt;redirect suburl=\"^$\" dest=\"http://www.example.org\"/&gt; --&gt;\n      &lt;site path=\"static\" charset=\"utf-8\"&gt;\n        &lt;static dir=\"_SHAREDIR_/static\" cache=\"0\"/&gt;\n      &lt;/site&gt;\n      &lt;eliom name=\"belenios\"&gt;\n        &lt;public-url prefix=\"https://belenios.wrmack.com\"/&gt;\n        &lt;!-- Domain name used in Message-ID --&gt;\n        &lt;domain name=\"belenios.wrmack.com\"/&gt;\n        &lt;!--\n          The following can be adjusted to the capacity of your system.\n          If &lt;maxrequestbodysizeinmemory&gt; is too small, large elections\n          might fail, in particular with so-called alternative questions\n          with many voters.\n          &lt;maxmailsatonce&gt; depends heavily on how sending emails is\n          handled by your system.\n        --&gt;\n        &lt;maxrequestbodysizeinmemory value=\"1048576\"/&gt;\n        &lt;maxmailsatonce value=\"1000\"/&gt;\n        &lt;tos uri=\"http://www.example.org/terms-of-service.html\"/&gt;\n        &lt;!-- &lt;contact uri=\"mailto:contact@example.org\"/&gt; --&gt;\n        &lt;server mail=\"elections@wrmack.com\" return-path=\"elections@wrmack.com\" name=\"Belenios public server\"/&gt;\n        &lt;auth-export name=\"builtin-password\"/&gt;\n        &lt;auth-export name=\"builtin-cas\"/&gt;\n        &lt;auth-export name=\"demo\"&gt;&lt;dummy/&gt;&lt;/auth-export&gt; &lt;!-- DEMO --&gt;\n        &lt;auth-export name=\"email\"&gt;&lt;email/&gt;&lt;/auth-export&gt; &lt;!-- DEMO --&gt;\n        &lt;auth name=\"demo\"&gt;&lt;dummy allowlist=\"demo_allowlist\"/&gt;&lt;/auth&gt; &lt;!-- DEMO --&gt;\n        &lt;auth name=\"local\"&gt;&lt;password db=\"local_passwords\"/&gt;&lt;/auth&gt; &lt;!-- DEMO --&gt;\n        &lt;auth name=\"public\"&gt;&lt;password db=\"public_passwords\" allowsignups=\"true\"/&gt;&lt;/auth&gt;\n        &lt;auth name=\"email\"&gt;&lt;email/&gt;&lt;/auth&gt; &lt;!-- DEMO --&gt;\n        &lt;auth name=\"captcha\"&gt;&lt;email use_captcha=\"true\"/&gt;&lt;/auth&gt; &lt;!-- DEMO --&gt;\n        &lt;!-- &lt;auth name=\"google\"&gt;&lt;oidc server=\"https://accounts.google.com\" client_id=\"client-id\" client_secret=\"client-secret\"/&gt;&lt;/auth&gt; --&gt;\n        &lt;source file=\"_SHAREDIR_/belenios.tar.gz\"/&gt;\n        &lt;logo file=\"_SHAREDIR_/static/placeholder.png\" mime-type=\"image/png\"/&gt;\n        &lt;favicon file=\"_VARDIR_/favicon.ico\" mime-type=\"image/png\"/&gt;\n        &lt;sealing file=\"demo/sealing.txt\" mime-type=\"text/plain\"/&gt;\n        &lt;default-group group=\"Ed25519\"/&gt;\n        &lt;nh-group group=\"Ed25519\"/&gt;\n        &lt;share dir=\"_SHAREDIR_\"/&gt;\n        &lt;storage backend=\"filesystem\"&gt;\n          &lt;uuid length=\"14\"/&gt;\n          &lt;spool dir=\"_VARDIR_/spool\"/&gt;\n          &lt;accounts dir=\"_VARDIR_/accounts\"/&gt;\n          &lt;map from=\"demo_allowlist\" to=\"demo/dummy_logins.txt\"/&gt;\n          &lt;map from=\"local_passwords\" to=\"demo/password_db.csv\"/&gt;\n          &lt;map from=\"public_passwords\" to=\"_VARDIR_/password_db.csv\"/&gt;\n        &lt;/storage&gt;\n        &lt;admin-home file=\"_VARDIR_/admin-home.html\"/&gt;\n        &lt;success-snippet file=\"_VARDIR_/success-snippet.html\"/&gt;\n        &lt;warning file=\"_VARDIR_/warning.html\"/&gt;\n        &lt;footer file=\"_VARDIR_/footer.html\"/&gt;\n        &lt;!-- &lt;deny-newelection/&gt; --&gt;\n        &lt;!--\n            Uncomment the following line to disable revoting. Note that\n            the ability to revote is important as a (light) measure\n            against coercion.\n        --&gt;\n        &lt;!-- &lt;deny-revote/&gt; --&gt;\n      &lt;/eliom&gt;\n    &lt;/host&gt;\n\n  &lt;/server&gt;\n\n&lt;/ocsigen&gt;\n</code></pre>"},{"location":"aws/dns/","title":"DNS name resolution","text":"<p>I had problems sending email. <code>msmtp</code> could not resolve the email endpoint name (<code>email-smtp.us-east-1.amazonaws.com</code>). The systemd Belenios service executes systemd-nspawn which can take arguments to point to a resolved configuration (see <code>man systemd-nspawn</code> and the <code>--resolv-conf</code> argument).  I could not get these options to work. In the end I hardwired what my EC2 uses into the post-inst.sh script in the squashfs image.</p> <p>What my EC2 instance uses for DNS resolution:</p> <p><pre><code>[ec2-user@ip-172-31-30-217 ~]$ ls -al /etc/resolv.conf\nlrwxrwxrwx. 1 root root 32 Jul 30  2024 /etc/resolv.conf -&gt; /run/systemd/resolve/resolv.conf\n\n[ec2-user@ip-172-31-30-217 ~]$ cat /run/systemd/resolve/resolv.conf\n# This is /run/systemd/resolve/resolv.conf managed by man:systemd-resolved(8).\n# ...\n\nnameserver 172.31.0.2\nsearch ec2.internal\n</code></pre> Then in contrib/fedora/make-squashfs.sh:</p> <pre><code>cat &gt; \"$TMP/postinst.sh\" &lt;&lt;EOF\n#!/bin/sh\n\n...\n\n# AWS\ncat &gt; /etc/resolv.conf &lt;&lt;XOF\nnameserver 172.31.0.2\nsearch ec2.internal\nXOF\n\n...\n\nEOF\n</code></pre>"},{"location":"aws/email/","title":"Set up email using Amazon SES (Simple Email Service)","text":""},{"location":"aws/email/#msmtp","title":"<code>msmtp</code>","text":"<p>In Amazon SES, set up verified identities. Under \"Email receiving\" create a rule set with a condition containing a recipient email address. This is used as the 'from' address in msmtprc configuration (below).</p> <p>The Belenios code calls <code>/usr/lib/sendmail</code> unless the environment variable <code>BELENIOS_SENDMAIL</code> is set:</p> <pre><code>(* src/web/server/common/send_message.ml *)\nlet mailer =\n  match Sys.getenv_opt \"BELENIOS_SENDMAIL\" with\n  | None -&gt; \"/usr/lib/sendmail\"\n  | Some x -&gt; x\n</code></pre> <p>When the squashfs image is built, msmtp is installed. The <code>sendmail</code> executable is linked to msmtp:</p> <pre><code>root@rootfs:~# ls -al /usr/lib/sendmail\nlrwxrwxrwx. 1 root root 12 Apr 16 21:42 /usr/lib/sendmail -&gt; ../bin/msmtp\n</code></pre> <p>Therefore, unless the environment variable BELENIOS_SENDMAIL is set, the code calls msmtp to send emails.</p> <p><code>msmtp</code> configuration is in <code>/etc/msmtprc</code> which is written when the squashfs image is built. The following shows my changes in <code>contrib/fedora/make-squashfs.sh</code>:</p> <p><pre><code>cat &gt; /etc/msmtprc &lt;&lt;XOF\ndefaults\ntls on\ntls_starttls on\ntls_trust_file /etc/ssl/certs/ca-certificates.crt\nsyslog on\n\naccount ses\nhost email-smtp.us-east-1.amazonaws.com\nport 587\nauth on\nuser AKIA3BQFZYK6ZWIIXT7P\npassword ******************\nfrom elections@wrmack.com\n\naccount default : ses\n# from %U@belenios\nsyslog LOG_MAIL\nXOF\n</code></pre> A valid \"from\" address having the same domain as the domain from which emails are sent is important to avoid emails being sent to spam.</p> <p>The domain should have SPF, DKIM and DMARC TXT records. If the domain is set up using Amazon Route 53 then configuring SES should provide these.</p>"},{"location":"aws/email/#security-summary","title":"Security summary","text":"<p>The msmtp settings ensure: - tls encryption is applied to emails - user authentication is by password</p> <p>Amazon settings:  - SPF (Sender Policy Framework):      - valid emails must come from domains authorised in this record (ie my domain: wrmack.com)     - this provides a check that someone else is not pretending to be me   - DKIM (DomainKeys Identified Mail): emails are digitally signed and DKIM holds the public key  - DMARC (Domain-based Message Authentication, Reporting, and Conformance):     - tells receiving server what action to take if SPF and DKIM fail     - this might be to reject the email or quarantine it (send it to spam) </p>"},{"location":"aws/troubleshoot/msmtp/","title":"Troubleshoot <code>msmtp</code>","text":""},{"location":"aws/troubleshoot/msmtp/#how-to","title":"How to:","text":""},{"location":"aws/troubleshoot/msmtp/#try-msmtp-from-inside-the-belenios-systemd-nspawn-container","title":"Try msmtp from inside the Belenios systemd-nspawn container","text":"<p>In one terminal:</p> <ul> <li>log into the AWS EC2 instance</li> <li>start the belenios-container service if it is not already active</li> </ul> <pre><code>sudo systemctl start belenios-container@main.service\n</code></pre> <ul> <li>then:</li> </ul> <pre><code># Get container name\nmachinectl list\n# MACHINE       CLASS     SERVICE        OS     VERSION ADDRESSES\n# belenios-main container systemd-nspawn debian 13      -\n\n# Get shell access to the running container\nsudo machinectl shell belenios-main\n\n# In the container, display server information\nmsmtp --serverinfo\n\n# Send an email message \n# - simply provide recipient email address,\n#   all other settings are taken from /etc/msmtprc\n# - end message by pressing Control-d\nmsmtp recipient@example.com \nSubect: Test\n\nThis is a test\nCTL-D\n</code></pre> <ul> <li>after sending an email check if it goes into the recipients spam folder</li> <li>check raw source of email of the received email for whether it passed checks for SPF, DKIM, DMARC</li> <li>in the raw source look for entries like this:</li> </ul> <pre><code>Authentication-Results: xxxxxxxxxxxxxxxx;\n dkim=pass header.i=xxxxxxxxxxxxx;\n dkim=pass header.i=xxxxxxxxxxxxx;\n spf=pass smtp.mailfrom=xxxxxxxxxxxx;\n dmarc=pass(p=QUARANTINE) header.from=xxxxxxxxxxx;\n</code></pre>"},{"location":"install/install/","title":"Install Belenios locally","text":"<p>Belenios source code is on Github, Gitlab and an Inria Gitlab repository.  It can also be downloaded from the Belenios website.</p> <p>My fork contains modified files for creating a squashfs image on a Fedora Linux workstation. These files are found under <code>contrib/fedora</code>.</p>"},{"location":"install/install/#get-the-belenios-code","title":"Get the Belenios code","text":"<p>On Github, the options for getting the source code are:</p> <ol> <li>clone my fork (recommended)</li> <li>download a zipped file</li> <li>clone the origin repository</li> <li>fork the origin repository</li> </ol>"},{"location":"install/install/#download-a-zipped-file","title":"Download a zipped file","text":"<p>A zipped file contains only the source code.  It does not contain the git history. This is a suitable option if you only want the source code as-is in order to run it and you do not want to amend it.  If you amend the source code and you later download another version of Belenios, you will need to copy your changes to it.</p> <p>Download the zip archive from Github.</p> <p>Extract to an appropriate folder.  </p> <p>Set up git in the Belenios root folder</p> <p>The Belenios code assumes a git repository and, when building Belenios, looks for it.</p> <p>In VSCode open the folder with the Belenios code then, under the Source tab, initialise a git repository and make an initial commit.</p> <p>Then in a terminal:</p> <pre><code># Configure git if not already configured\ngit config --global user.email \"user@example.com\"\ngit config --global user.name \"username\"\n\n# Add a version tag\ngit tag -a -m \"Belenios version 3.1\" \"3.1\"\n</code></pre>"},{"location":"install/install/#clone-the-belenios-repository","title":"Clone the Belenios repository","text":"<p>This creates a copy of the Belenios origin repository on your local workstation including the full git history. </p> <p>You can make changes. </p> <p>You can pull updates and deal with any merges conflicting with your changes.</p> <p>You can create a remote on Github and push your code to it.</p> <p>From the green 'Code' button on the Github Belenios repository, copy the https url. In a terminal change to an appropriate directory and</p> <pre><code>git clone &lt;https url&gt;\n</code></pre>"},{"location":"install/install/#fork-the-belenios-repository","title":"Fork the Belenios repository","text":"<p>This creates a copy of the Belenios repository on Github under your own account name. </p> <p>You can then clone your fork to work on the code locally. Your own fork then becomes the \"origin\" and the original belenios repository becomes the \"upstream\".</p> <p>You can pull updates from the upstream and deal with any merge conflicts.</p> <p>You can push your local changes to your fork.  </p> <p>From the Fork button on the Github Belenios repository, click the down arrow and select 'Create a new fork'.</p> <p>Then, from your own fork, create a local clone as above. </p>"},{"location":"install/install/#clone-my-fork","title":"Clone my fork","text":"<p>My fork of Belenios has the changes that worked for me under the directory <code>contrib/fedora</code>.</p> <p>Even if you don't use my fork, you might make the changes I made.  The files I changed are all in <code>contrib/fedora</code>. The changes are also described in Troubleshooting - My changes </p>"},{"location":"install/install/#set-up-the-non-ocaml-dependencies","title":"Set up the non-OCaml dependencies","text":"<p>See the file INSTALL.md in the Belenios code for installation instructions. These recommend a Debian Sid distribution. For my Fedora 42 distribution I did: <pre><code>sudo dnf install gcc-c++ gmp-devel libsodium-devel pkgconfig-pkg-config m4 openssl-devel sqlite3 sqlite-devel wget1 ca-certificates ncurses-devel zlib-ng-devel gd-devel cracklib jq nodejs-npm patch\n</code></pre></p>"},{"location":"install/install/#run-the-opam-bootstrapsh-script","title":"Run the opam-bootstrap.sh script","text":"<p>This script requires that dune is not installed. If you have dune installed in your current opam switch and don't want to remove it, you could create a new switch without it:</p> <pre><code># Optional\nopam switch create \"nodune\" 5.3.0\neval $(opam env)\n</code></pre> <pre><code>./opam-bootstrap.sh\n</code></pre>"},{"location":"install/install/#set-the-environment","title":"Set the environment","text":"<pre><code>source ./env.sh\neval $(opam env)\n</code></pre>"},{"location":"install/install/#build-the-server","title":"Build the server","text":"<p>The script <code>frontend/Makefile</code> has two references to <code>nodejs</code>. Fedora knows <code>nodejs</code> as <code>node</code>. Change both of <code>nodejs</code> to <code>node</code>.</p> <p>The script requires the git repository to have a tag for the current version. <pre><code># Check if a tag exists\ngit tag --list\n\n# If a version tag is not present, create one like\ngit tag -a -m \"Belenios version 3.1\" \"3.1\"\n</code></pre> Then</p> <pre><code>make build-release-server\n</code></pre>"},{"location":"install/install/#check-server-works","title":"Check server works","text":"<p><pre><code>demo/run-server.sh\n</code></pre> In a browser go to <code>127.0.0.1:8001</code> to see if Belenios is up.</p>"},{"location":"install/preparation/","title":"Prepare a squashfs image","text":""},{"location":"install/preparation/#documentation","title":"Documentation","text":"<p>The code in Belenios source code builds a squashfs image. Once this image is run as a container it provides the Belenios server. The source code to make the image is based on Debian Linux. The process for creating the image starts with creating a container running Debian. However I use podman rather than docker (podman is already installed in my Fedora setup). </p> <p>I amended some of the scripts - mainly to remove reference to backports (which seemed to be built for X64 systems). See my fork for all changed files (under <code>contrib/fedora</code>).</p>"},{"location":"install/preparation/#build-an-image","title":"Build an image","text":"<p>I do the following from the OS host (ostree) using podman:</p> <pre><code># change directory - move to belenios root\ncd &lt;path to belenios&gt;\n\n# Note the '.' at the end of the line\nsudo podman build -f contrib/fedora/nspawn-build.Dockerfile -t belenios-nspawn-image .\n</code></pre>"},{"location":"install/preparation/#setup","title":"Setup","text":"<pre><code>mkdir -p _docker\nsudo podman run --rm belenios-nspawn-image tar -C /tmp -c build | tar -C _docker -x\n</code></pre>"},{"location":"install/preparation/#run-a-container-to-create-a-squashfs-compressed-file-system","title":"Run a container to create a squashfs compressed file system","text":"<p>The following executes <code>make</code> inside a podman container. (The Belenios documentation adds <code>make</code> to the <code>docker run</code> command line instead. My preference is to run the container without the <code>make</code> command, then from inside the container run <code>make</code>. If <code>make</code> fails, the container is not removed. There is the possibility of executing a bash shell from outside the container in another terminal as root if it is necessary to make changes with admin privileges.)</p> <pre><code>sudo podman run -it --name belcont --volume=$PWD:/tmp/belenios:Z --volume=$PWD/_docker/build:/tmp/build:Z --rm --userns=keep-id --privileged --security-opt=label=disable belenios-nspawn-image\n# Inside the container do:\nmake\n</code></pre> <p>If you get an error message about git being unclean, exit the container and do:</p> <p><pre><code>git add .\ngit commit -m \"Your message\"\n</code></pre> Then run the container again and execute <code>make</code>.</p>"},{"location":"install/preparation/#check-the-squashfs-image-provides-belenios-optional","title":"Check the squashfs image provides belenios (optional)","text":"<p>We can run belenios locally as a service. We set the service up under /var/lib/machines rather than /srv because this is compatible with where containers in Fedora are expected:  - in belenios-container@.service change paths, where they occur, from /srv to /var/lib/machines</p> <p><pre><code>mkdir -p /var/lib/machines/belenios-containers\ncd &lt;belenios root&gt;\nsudo cp contrib/fedora/belenios-nspawn /var/lib/machines/belenios-containers\nsudo cp contrib/fedora/belenios-container@.service /etc/systemd/system\nsudo mkdir /var/lib/machines/belenios-containers/main\nsudo cp _docker/build/beleniosxxxxxxxx.squashfs /var/lib/machines/belenios-containers/main\nsudo ln -s /var/lib/machines/belenios-containers/main/beleniosxxxxx.squashfs rootfs.squashfs\nsudo mkdir /var/lib/machines/belenios-containers/main/belenios\nsudo chown 1000:1000 /var/lib/machines/belenios-containers/main/belenios\nmkdir /var/lib/machines/belenios-containers/main/belenios/etc\nmkdir /var/lib/machines/belenios-containers/main/belenios/var\nsudo cp demo/ocsigenserver.conf.in /var/lib/machines/belenios-containers/main/belenios/etc\n\nsudo systemctl daemon-reload\nsudo systemctl start belenios-container@main.service\n</code></pre> - go to 127.0.0.1:8001 to check Belenios is being served.</p>"},{"location":"install/troubleshoot/containers/","title":"Containers","text":""},{"location":"install/troubleshoot/containers/#isolation","title":"Isolation","text":"<p><code>chroot</code>, <code>unshare</code>, <code>systemd-nspawn</code>, <code>podman</code>, <code>docker</code> all provide isolation, to different degrees, of files, processes, user namespaces, networks, and more.   Containers \"contain\" or \"isolate\" something in some way.  Code is on the same file system as it always was.  It is just \"contained\" or isolated and hence more secure and portable (to the extent it doesn't have external dependencies).  </p> <p>All of these isolation mechanisms are used in producing a squashfs image for runnning Belenios.</p> <p>The outcome, is a squashfs image which can be run by systemd-nspawn as a systemd service on the host. </p> <p>Comparison table:</p> Feature / Tool chroot unshare systemd-nspawn docker Purpose Change root directory for a process (filesystem isolation) Run a program with new Linux namespaces (fine-grained isolation) Lightweight container manager built on Linux namespaces &amp; cgroups (part of systemd) Full container platform with runtime, networking, orchestration, and registry integration Isolation Level Filesystem only (unless combined with other tools) User-specified namespaces (PID, NET, UTS, IPC, USER, MNT, etc.) Filesystem + namespaces (PID, NET, IPC, UTS, user) + cgroups resource limits Full isolation with namespaces, cgroups, seccomp, capabilities Security Weak (processes can escape with root privileges unless extra measures) Stronger if combined namespaces are used, but depends on config Stronger \u2014 drops capabilities, applies cgroups, integrates with systemd security features Strongest by default \u2014 adds seccomp filters, AppArmor/SELinux profiles, capability dropping Ease of Use Very simple, but low-level; needs a prepared root filesystem Low-level, requires explicit namespace setup; flexible but complex Higher-level, single command to start an isolated container; integrates with systemd Higher-level, with CLI, Dockerfiles, image registry, orchestration (Swarm/Kubernetes) Networking Shares host network unless combined with <code>unshare -n</code> or extra setup Configurable (can isolate network stack or use host) Defaults to private veth bridge; can integrate with host networking Advanced networking (bridge, overlay, host, macvlan) with built-in tooling Resource Control None None (unless you manually apply cgroups) Yes, via cgroups (CPU, memory, I/O) Yes, via cgroups (CPU, memory, I/O) with fine-grained limits Image Management None (you prepare the root fs manually) None Supports machine images (<code>systemd-nspawn -D /path</code> or <code>--image</code>) Built-in image distribution via Docker Hub / registries Init / PID 1 None (you must run your own init manually) None (just runs the command you give) Runs systemd (or chosen init) as PID 1 in the container Runs whatever you specify (commonly an app, or full init system) Typical Use Case Testing a different root filesystem, rescue/repair Advanced sandboxing, debugging namespaces Lightweight containers on a systemd host, testing distros, dev environments Application containerization, microservices, production deployments"},{"location":"install/troubleshoot/containers/#what-do-the-scripts-do","title":"What do the scripts do?","text":""},{"location":"install/troubleshoot/containers/#podman-build","title":"podman build","text":"<p><pre><code>podman build -f contrib/docker/nspawn-build.Dockerfile -t belenios-nspawn-image .\n</code></pre> Looking at <code>nspawn-build.Dockerfile</code> this, among other things,:</p> <ul> <li>builds a Debian image and installs dependencies</li> <li>sets up the belenios user and ownership</li> <li>runs the script <code>contrib/debian/setup-build-dir.sh /tmp/build</code> which creates in <code>_docker/build</code>,:<ul> <li><code>Makefile</code> which is a symbolic link to <code>contrib/debian/build.mk</code></li> <li><code>Makefile.config</code></li> </ul> </li> </ul>"},{"location":"install/troubleshoot/containers/#podman-run","title":"podman run","text":"<p><pre><code>podman run -it --name belcont --volume=$PWD:/tmp/belenios:Z --volume=$PWD/_docker/build:/tmp/build:Z --rm --userns=keep-id --privileged --security-opt label=disable belenios-nspawn-image\n</code></pre> This runs in privileged mode with SELinux disabled in the container.</p> <p>To get a shell inside the container with root privileges do: <pre><code>podman exec -it -u 0 belcont bash\n</code></pre></p> <p>When the command <code>make</code> is executed it runs <code>_docker/build/Makefile</code> (a link to <code>contrib/debian/build.mk</code>) which calls:</p> <ul> <li>$(SQUASHFS), which calls $(DEB), which calls $(DSC) and $(CHROOT)</li> <li>$(DSC) runs the script <code>contrib/debian/make-dsc.sh</code> which builds <code>belenios-server_XXX.dsc</code></li> <li>$(CHROOT) runs the script <code>contrib/debian/make-chroot.sh</code><ul> <li>it calls <code>config.sh</code></li> </ul> </li> <li>$(DEB) runs the <code>sbuild</code> command to build Debian packages</li> <li>finally $(SQUASHFS) runs the script <code>contrib/debian/make-squashfs.sh</code></li> </ul>"},{"location":"install/troubleshoot/containers/#to-run-rootfssquashfs-with-systemd-nspawn","title":"To run rootfs.squashfs with systemd-nspawn","text":"<pre><code>sudo systemd-nspawn -i /var/lib/machines/belenios-containers/main/rootfs.squashfs\n# Or\nsudo systemd-nspawn -i /var/lib/machines/belenios-containers/main/rootfs.squashfs --boot\n</code></pre>"},{"location":"install/troubleshoot/containers/#to-run-as-systemd-service","title":"To run as systemd service","text":"<pre><code>sudo systemctl start belenios-container@main.service\n</code></pre>"},{"location":"install/troubleshoot/containers/#inspect-with-machinectl","title":"Inspect with machinectl","text":"<pre><code>machinectl list\nmachinectl show rootfs.squashfs\nmachinectl status rootfs.squashfs\n# Run interactive shell as root in running container\nsudo machinectl shell &lt;container name&gt;\n</code></pre>"},{"location":"install/troubleshoot/my_changes/","title":"My changes","text":""},{"location":"install/troubleshoot/my_changes/#dockerfile","title":"Dockerfile","text":"<pre><code>FROM debian:unstable\nRUN apt-get update -qq &amp;&amp; apt-get upgrade -qq &amp;&amp; apt-get install -qq build-essential mmdebstrap bubblewrap devscripts squashfs-tools-ng zstd git sbuild\nRUN useradd --create-home belenios\nCOPY --chown=belenios:belenios . /tmp/belenios\nWORKDIR /tmp/belenios\nRUN cp contrib/debian/ocaml-backports-keyring.asc /etc/apt/trusted.gpg.d\nRUN contrib/debian/install-deps.sh\nUSER belenios\nRUN contrib/debian/setup-build-dir.sh /tmp/build\nWORKDIR /tmp/build\nRUN git config --global user.name \"Belenios Builder\"\nRUN git config --global user.email \"belenios.builder@example.org\"\nRUN git config --global --add safe.directory /tmp/belenios\n</code></pre>"},{"location":"install/troubleshoot/my_changes/#makefile","title":"Makefile","text":"<p><code>_docker/build/Makefile</code> links to <code>debian/build.mk</code> which runs various scripts as described elsewhere. I changed the following scripts.</p>"},{"location":"install/troubleshoot/my_changes/#configsh","title":"<code>config.sh</code>","text":"<p>Just use Debian unstable.</p> <pre><code>: ${STABLE_MIRROR:=\"http://deb.debian.org\"}\n: ${STABLE_SUITE:=\"trixie\"}\n</code></pre>"},{"location":"install/troubleshoot/my_changes/#chrootsh","title":"<code>chroot.sh</code>","text":"<p>I found it necessary to remove all references to backports as these did not work on arm64.</p> <pre><code>#!/bin/sh\n\nset -e\n\nif [ \"$#\" -ne 1 ]; then\n    echo \"Usage: $0 &lt;target&gt;\"\n    exit 1\nfi\n\nTARGET=\"$1\"\n\n. \"$(dirname \"$0\")/config.sh\"\n\nexport SOURCE_DATE_EPOCH=\"$(git log -1 --pretty=format:%ct)\"\n\n. \"$(dirname \"$0\")/deps.sh\"\n\nTMP=\"$(mktemp --tmpdir --directory tmp.belenios.XXXXXXXXXX)\"\ntrap \"rm -rf $TMP\" EXIT\nchmod a+rx \"$TMP\"\n\ncat &gt; \"$TMP/sources.list\" &lt;&lt;EOF\ndeb $STABLE_MIRROR/debian $STABLE_SUITE main\nEOF\n\nmkdir \"$TMP/belenios-npm\"\n( cd frontend &amp;&amp; npm install &amp;&amp; npm ci --cache \"$TMP/belenios-npm\" )\ncp frontend/package-lock.json \"$TMP/belenios-npm\"\nrm -rf \"$TMP/belenios-npm/_logs\"\n\nmmdebstrap --variant=buildd \\\n  --setup-hook='mkdir -p \"$1\"'\"$TMP\" \\\n  --include=\"passwd build-essential debhelper $BELENIOS_DEVDEPS $BELENIOS_DEBDEPS\" \\\n  --customize-hook='copy-in \"'\"$TMP\"'\"/belenios-npm /var/cache' \\\n  --customize-hook='chroot \"$1\" chown root:root -R /var/cache/belenios-npm' \\\n  --customize-hook='chroot \"$1\" apt-get update' \\\n  \"$STABLE_SUITE\" \"$TARGET\" \"$TMP/sources.list\"\n</code></pre>"},{"location":"install/troubleshoot/my_changes/#make-squashfssh","title":"<code>make-squashfs.sh</code>","text":"<p>As for <code>chroot.sh</code> I removed all references to backports.</p> <pre><code>#!/bin/sh\n\nset -e\n\nif [ \"$#\" -ne 2 ]; then\n    echo \"Usage: $0 &lt;belenios-server-deb&gt; &lt;target&gt;\"\n    exit 1\nfi\n\nBELENIOS_SERVER_DEB=\"$1\"\nBELENIOS_SERVER_BUILDINFO=\"${BELENIOS_SERVER_DEB%.deb}.buildinfo\"\nTARGET=\"$2\"\n\n. \"$(dirname \"$0\")/config.sh\"\n\nexport SOURCE_DATE_EPOCH=\"$(git log -1 --pretty=format:%ct)\"\n\nTMP=\"$(mktemp --tmpdir --directory tmp.belenios.XXXXXXXXXX)\"\n# trap \"rm -rf $TMP\" EXIT\necho \"I: using directory $TMP...\"\n\nchmod 755 \"$TMP\"\n\ncp \"$BELENIOS_SERVER_DEB\" \"$TMP\"\nBELENIOS_SERVER_DEB=\"$TMP/${BELENIOS_SERVER_DEB##*/}\"\n\n\n# Filter out build date for reproducibility\ngrep -v \"^Build-Date: \" \"$BELENIOS_SERVER_BUILDINFO\" &gt; \"$TMP/buildinfo.txt\"\nBELENIOS_SERVER_BUILDINFO=\"$TMP/buildinfo.txt\"\n\ncat &gt; \"$TMP/sources.list\" &lt;&lt;EOF\ndeb $STABLE_MIRROR/debian $STABLE_SUITE main\nEOF\n\ncat &gt; \"$TMP/postinst.sh\" &lt;&lt;EOF\n#!/bin/sh\n\nset -e\n\necho \"I: setting up the rootfs...\"\n\nln -sfT /usr/lib/systemd/resolv.conf /etc/resolv.conf\necho belenios &gt; /etc/hostname\n\ncat &gt; /etc/hosts &lt;&lt;XOF\n127.0.0.1 localhost\n127.0.1.1 belenios\n::1     localhost ip6-localhost ip6-loopback\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\nXOF\n\nmkdir /etc/belenios\n\ncat &gt; /etc/msmtprc &lt;&lt;XOF\naccount default\nhost localhost\nfrom %U@belenios\nsyslog LOG_MAIL\nXOF\n\nSBOM=/usr/share/belenios-server/sbom/runtime-deb-packages.txt\necho \"Installed-Packages:\" &gt; \\$SBOM\ndpkg-query -W -f=',\\n \\${binary:Package} (= \\${Version})' | tail -n +2 &gt;&gt; \\$SBOM\necho &gt;&gt; \\$SBOM\nchown root:root -R /usr/share/belenios-server/sbom\nEOF\nchmod +x \"$TMP/postinst.sh\"\n\nmmdebstrap --variant=essential \\\n  --setup-hook='mkdir -p \"$1\"'\"$TMP\" \\\n  --dpkgopt='path-exclude=/usr/share/man/*' \\\n  --dpkgopt='path-exclude=/usr/share/locale/*' \\\n  --dpkgopt='path-include=/usr/share/locale/locale.alias' \\\n  --dpkgopt='path-exclude=/usr/share/doc/*' \\\n  --dpkgopt='path-include=/usr/share/doc/*/copyright' \\\n  --dpkgopt='path-include=/usr/share/doc/*/changelog.Debian.*' \\\n  --hook-dir=/usr/share/mmdebstrap/hooks/file-mirror-automount \\\n  --include=\"passwd systemd dbus msmtp-mta logrotate\" \\\n  --include=\"$BELENIOS_SERVER_DEB\" \\\n  --customize-hook='copy-in \"'\"$BELENIOS_SERVER_BUILDINFO\"'\" /usr/share/belenios-server/sbom' \\\n  --customize-hook='copy-in \"'\"$TMP\"'/postinst.sh\" /tmp' \\\n  --customize-hook='chroot \"$1\" /tmp/postinst.sh' \\\n  --customize-hook='chroot \"$1\" rm /tmp/postinst.sh' \\\n  --customize-hook='chroot \"$1\" rm -rf '\"$TMP\" \\\n  \"$STABLE_SUITE\" \"$TARGET\" \"$TMP/sources.list\"\n</code></pre>"},{"location":"install/troubleshoot/my_changes/#belenios-nspawn","title":"belenios-nspawn","text":""},{"location":"install/troubleshoot/selinux/","title":"SELinux troubleshooting","text":""},{"location":"install/troubleshoot/selinux/#cannot-run-as-service","title":"Cannot run as service","text":"<p>When trying to start belenios-container@main.service with systemctl, an error message showed SELinux was preventing s-nspawn from reading and executing belenios-nspawn.</p> <p>I had to do: <pre><code>sudo ausearch -c '(s-nspawn)' --raw | audit2allow -M my-snspawn\nsudo semodule -X 300 -i my-snspawn.pp\n</code></pre></p>"}]}